Working in the Catkin Workspace (~/catkin_ws)
    this is the package location as well (create them using catkin_create_pkg

Use catkin_make to build packages
    after making packages, you need to "source ./devel/setup.bash" once
    or before executing anything in that terminal? not 100% sure

execute your file by using for example "rosrun t2tf_sst test.py"
    i.e. "rosrun <package_name> <executable_node_name>"
    for this the node needs to be executable (chmod +x <file>)

python files need to start with "#!/usr/bin/env python"
    no spaces allowed, no comments before that
    keyword "shebang line"

to get pycharm to recognize the ros packages, do:
    "source ~/catkin_ws/devel/setup.bash"
    "./[...]/pycharm.sh"
    i.e. start pycharm after sourcing setup.bash in the same terminal

---
Importing messages from another package
    Make sure you always "source ./devel/setup.bash"
    The CMakeLists of the package with the messages need to have the following uncommented
        add_message_files(...)
        generate_messages(...)
    Also make sure CMakeLists has message_generation, message_runtime listed under find_package()


Auto updating ros graph:
    dont need spin if you have a blocking tkinter window
        (if you spin, it will crash because tkinter cant deal with multithreading)
    set up the plot, call the "listener"
    (basically instead of rospy.spin() you call plt.show()


Using rviz to visualize data published to a topic in PointCloud2 Format:
    Start rviz using: "rosrun rviz rviz"
    Click "Add" (bottom left)
    Select PointCloud2
    The new pointcloud2 object in rviz has a text field topic, enter the name of the topic there (click once next to it)
    Play the bag once (just start and stop again)
    The global options have a field "fixed frame" (default "map", has a dropdown after playing the bag)
    Select ibeo_front_center there
    --
    You can now play the bag and alt-tab into rviz to see the visualization of the bag


Using tf:
    need a source and destination frame (included in /tf and /tf_static)
    want to map c2x --> lidar data: src_id=odom and dest_id = ibeo_front_center
    issue: timing of everything is messed up (message arriving in diff intervals with different stamps)
    solution: before storing any information about the frames, change the stamp to rospy.Time(0)
        --> only work with rospy.Time(0) for every time entry
    then, use tf.TransformerROS.transformPoint(dest_id, ps=point)
        the point needs to be in ros msg "StampedPoint" format (time=rospy.Time(0) and the point as x/y/z=x/y/0)

