Upcoming work that has to be done:

SIMULATION OF DATA
	covariance matrix from variance array (only diag filled)

	implement one of the solutions for way to create covariance matrices, scrap the random-walk algorithm

	change the variance for every sensor and have the covariance algo know that (therefore changing
	their respective covariance matrices in such a way that the sensor with higher variance will get a lower weight)
		already implemented a simple way of doing this, maybe redo it (based on variance lists instead of linear change)

	the entire code needs some cleanup re: covariance simulation
	some functions still get cov_example_id and inside they have hard coded max/min_val for get_random_cov (i.e. the spread fct)
		

REAL DATA
	c2x data and lidar data is coming in at completly different rates apparantly
		disabling the graphic display doesn't change that
		this means lidar data will be coming in for quite some time after the last c2x transmission
	-->	so the current implementation (store all c2x data and then grab it by time stamp later) is absolutly necessary

	possible issue: "rotation" of velocity? maybe need to use some other conversion method of points
		currently using transformPoint() but that only takes x/y/z (setting z=0)
		might need to rotate manually anyway? or look through the other functions (transformPose(), lookupTwist()?)
			could use lookupTwist() and give this twist the velocity data
		consider implementing your own function that takes a point in the format x/y/vel_x/... and a Transformer object and
		performs this (or a class that subscribes to the tf topics, creates its own subscriber and can be called just like
		that)
	!	the same issue will arise with boxes (since their x/y) dimension change with rotation aswell
		
		can maybe just treat them like point coordinates? since its all just x/y data anyway...
			that should work!? 
		--> currently implemented this like this, but for length/width this is problematic I think
	!	THIS DOESNT WORK, YOU NEED TO FIND A DIFFERENT WAY THAN WHATS CURRENTLY HAPPENING
		Velocity transformation only depends on frame rotation, but not translation, but tf is also doing translation
			"https://answers.ros.org/question/205503/linear-velocity-transformation-in-ros/"
			SOL: create your own coordinate frame with same origin as odom but rotation = rotation of ibeo_front_center
			then you will only rotate, but not translate
			ISSUE: thats not that easy, because the two frames are not directly connected in the tf tree
			
		
	c2x vehicle display is not working correctly (jumping around etc)
		probably due to the low frequency of incoming c2x data
	!	might need something like a constant velo model to accomodate for the low freq
			take into account age+velocity of the car (probably with a small multiplicative factor to reduce impact)
				
		--> implemented some basic fixes, but its still not up to date compared to the lidar data		
		TEST/IMPROVE constant velocity model to manipulate the coordinates

	perform t2ta on the second data set (maven-2.bag)
		--> doing this, works fine (better than the old approach, for example when using size(history)==1 (=> Duration(0))
		--> after adding in a simple constant velocity model, it works even better and also works good for larger hist sizes
		only in 1 szenario (of the whole 2.5min bag) did an association fail (~id 5323)

	analyze the issue that bigger history sizes cause worse results in some cases
		and also maybe check if you can improve the performance a bit, with bigger history it causes huge lag

	consider changing the visualization so that instead of plotting directly, the data is just merged at a fusion center and
	then published to a new topic. A second node can then subscribe to this topic and simply display ALL information from
	the topic
		topic could have its own msg format, that simply includes an array of tuples that match what visuals needs
		(i.e. (x,y,id,color))
		so msg would just be header+points, with points being an array of x+y+id+color (which in itself should probably be
		a second msg definition)
		this would also allow you to store bagfiles of results

	consider adding in (/testing) the following change to the t2td(with history) function:
	1.	instead of averaging over all time points included in the history, weight the more recent ones higher
		need to think about a weighting and how much sense this makes
	2.	a dynamic threshold, that slowly increases as long as no object match was found, and decreases while objects are 
		matched 

